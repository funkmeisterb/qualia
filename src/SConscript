import os

# From http://code.activestate.com/recipes/502263/
# By Paul Rubin
def unique(seq, keepstr=True):
  t = type(seq)
  if t in (str, unicode):
    t = (list, ''.join)[bool(keepstr)]
  seen = []
  return t(c for c in seq if not (c in seen or seen.append(c)))

def run(cmd):
    """Run a command and decipher the return code. Exit by default."""
    import SCons.Script
    print cmd
    res = os.system(cmd)
    # Assumes that if a process doesn't call exit, it was successful
    if (os.WIFEXITED(res)):
        code = os.WEXITSTATUS(res)
        if code != 0:
            print "Error: return code: " + str(code)
            if SCons.Script.keep_going_on_error == 0:
                sys.exit(code)

def fnCompress(target, source, env):
    files = filter(lambda x: str(x).startswith('build/'), source)
    for file in files:
        run(AVR_BIN_PREFIX+'ar rcs %s %s'%(target[0], file))

Import(["platform", "mode"])
SUBDIRS = ["qualia/core", "qualia/util", "qualia/rl", "qualia/ga", "qualia/computer", "qualia/learning"]

if (platform == 'computer'):
	SUBDIRS += ["qualia/computer"]

env = Environment();
arch = env['PLATFORM'];

MCU = 'atmega168'
F_CPU = 16000000
EXTRA_LIBS = ""
LIBS = ""
LIBPATH = ""
AVR_GCC_DIR = ""
PLUGINS = ""

# default
if (platform == 'avr' or platform == 'arduino'):
	if (arch == 'darwin'):
	  AVR_GCC_DIR = "/Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr/bin/"
	else:
	  AVR_GCC_DIR = ""

TARGET = "qualia"

INCLUDE_PATH = ARGUMENTS.get('INCLUDE_PATH', "").split(":")
INCLUDE_PATH = unique(INCLUDE_PATH + [os.getcwd()])

# AVR arguments
#MCU = getBoardConf(r'^%s\.build\.mcu=(.*)'%ARDUINO_BOARD)
MCU = ARGUMENTS.get('MCU', MCU)
#F_CPU = getBoardConf(r'^%s\.build\.f_cpu=(.*)'%ARDUINO_BOARD)
F_CPU = ARGUMENTS.get('F_CPU', F_CPU)

# Arduino arguments
EXTRA_LIBS = ARGUMENTS.get('EXTRA_LIBS', EXTRA_LIBS).split(':')

# Shared library arguments.
LIBS = ARGUMENTS.get('LIBS', LIBS).split(',')
LIBPATH = ARGUMENTS.get('LIBPATH', LIBPATH).split(':')

PLUGINS = ARGUMENTS.get('PLUGINS', PLUGINS).split(',')

# There should be a file with the same name as the folder and with the extension .pde
#TARGET = os.path.basename(os.path.realpath(os.curdir))
#assert(os.path.exists(TARGET+'.pde'))

AVR_GCC_DIR = ARGUMENTS.get('AVR_GCC_DIR', AVR_GCC_DIR)
if AVR_GCC_DIR:
  AVR_GCC_DIR += '/'

AVR_BIN_PREFIX = AVR_GCC_DIR + 'avr-'

# Plugins.
if ('osc' in PLUGINS):
  LIBS += ["lo"]
  SUBDIRS += ["qualia/plugins/osc"]
if ('mapper' in PLUGINS):
  LIBS += ["mapper-0", "lo"]
  SUBDIRS += ["qualia/plugins/mapper"]
if ('bt' in PLUGINS):
  SUBDIRS += ["qualia/plugins/bt"]

LIBS += ["m"]
#############################################################################
 
sources = []
for subdir in SUBDIRS:
  sources += Glob(subdir + "/*.cpp")
  sources += Glob(subdir + "/*.c")

# Remove avrdefs to avoid the "no symbol" linking error
if (platform == "computer"):
	sources = [f for f in sources if "core/avrdefs.cpp" not in str(f)]

# Create environment and set default configurations ###################################
if (platform == 'avr' or platform == 'arduino'):
  cFlags = ['-ffunction-sections', '-fdata-sections', '-fno-exceptions',
      '-funsigned-char', '-funsigned-bitfields', '-fpack-struct', '-fshort-enums',
      '-Os', '-mmcu=%s'%MCU]
  env = Environment(CC = AVR_BIN_PREFIX+'gcc', CXX = AVR_BIN_PREFIX+'g++',
      CPPPATH = INCLUDE_PATH, CPPDEFINES = {'F_CPU':F_CPU}, 
      CFLAGS = cFlags+['-std=gnu99'], CCFLAGS = cFlags, TOOLS = ['gcc','g++'])

  #env.Append(BUILDERS={'Elf':Builder(action=AVR_BIN_PREFIX+'gcc '+
  #        '-mmcu=%s -Os -Wl,--gc-sections,--relax -o $TARGET $SOURCES -lm'%MCU)})
  #env.Append(BUILDERS={'Hex':Builder(action=AVR_BIN_PREFIX+'objcopy '+
  #        '-O ihex -R .eeprom $SOURCES $TARGET')})
  env.Append(BUILDERS = {'CompressCore':Builder(action = fnCompress) })
  
  objs = env.Object(sources) #, LIBS=libs, LIBPATH='.')
  objs = env.CompressCore("lib" + TARGET + ".a", objs)
  #env.Elf(TARGET + '.elf', objs)
  #env.Hex(TARGET + '.hex', TARGET + '.elf')

  # Print Size
  # TODO: check binary size
  #MAX_SIZE = getBoardConf(r'^%s\.upload.maximum_size=(.*)'%ARDUINO_BOARD)
  #print ("maximum size for hex file: %s bytes"%MAX_SIZE)
  #env.Command(None, TARGET+'.hex', AVR_BIN_PREFIX+'size --target=ihex $SOURCE')
#  env.Append(CPPPATH=["/usr/local/include", "/usr/include", os.getcwd()])

else:
  
  env = Environment()
  
  # NOTE: This line was useless and was causing problem: it caused implicit dependency
  # that made scons copy the include files to /usr/local/include even without 
  # calling scons install
  #env.Append(CPPPATH=["/usr/local/include", "/usr/include", os.getcwd()])
  env.Append(CPPPATH=INCLUDE_PATH)
  
  env.Append(LIBS=LIBS)
  if (mode == 'debug'):
    env.Append(CPPFLAGS=['-Wall', '-g', '-DDEBUG=1', '-DDEBUG_LEVEL=3'])
  else:
    env.Append(CPPFLAGS=['-Wall', '-O2', '-DDEBUG_LEVEL=1'])
  
  #objects = env.StaticObject(source = sources)

  # Peut etre une erreur: on devrait construire des OBJETS (?)
  lib = env.Library(target = TARGET, source = sources)

  if (arch == 'linux' or arch == 'darwin'):
    prefix = ARGUMENTS.get('PREFIX', "/usr/local")
  else:
    prefix = ARGUMENTS.get('PREFIX', "")
	
  installPath = prefix + "/lib"

  installPathList = env.Install(installPath, lib)
  for subdir in SUBDIRS:
  	installPathList += [ env.Install(prefix+"/include/" + subdir, Glob(subdir+"/*.h")) ]
  env.Alias("install", installPathList)

#execfile("./tools/scons/SConstruct.new")
#
#SConscript("tests/subsconstest/SConscript")

#SConscript("tests/unit/SConscript")
#SConscript("tests/example/SConscript")
#SConscript("tests/libmapper/SConscript")

